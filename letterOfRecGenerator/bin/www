#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('letterofrecgenerator:server');
var http = require('http');

const express = require('express')
const https = require('https')
const path = require('path')
const fs = require('fs')

/**
 * Get port from environment and store in Express.
 */
console.log("process env port is " + process.env.port);
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

console.log("Listening on port ", port);

//Enable reverse proxy support in Express
app.enable('trust proxy');

//https redirect
app.use(function(req, res, next) {
    /*if (req.secure) {
        // request was via https, so do no special handling
        next();
    } else {
        // request was via http, so redirect to https
        res.redirect('https://' + req.headers.host + req.url);
    }*/
    if (req.headers["x-forwarded-proto"] === "https"){
       return next();
    }
    res.redirect("https://" + req.headers.host + req.url); 
});

//https
var key = fs.readFileSync(path.join(__dirname, '../cert', 'key.pem'));
var cert = fs.readFileSync(path.join(__dirname, '../cert', 'cert.pem'));
var options = {
    key: key,
    cert: cert
};

https.createServer(options, app).listen(443);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
